# -*- coding: utf-8 -*-
"""ML_Project_phase3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YDdvgUPeS_wxTC7smTUOjGdd5sOJdoBk
"""

!pip install python_speech_features

!unzip '/content/drive/MyDrive/Machine Learning/LUMS_FALL2020_PROJECT_DATA1.zip' -d '/content/'

import python_speech_features as mfcc
from scipy.io.wavfile import read
import numpy as np
import pandas as pd
import re
import os
from sklearn.metrics import confusion_matrix,accuracy_score,f1_score
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix,accuracy_score,f1_score,classification_report
from sklearn.model_selection import GridSearchCV
from sklearn.neural_network import MLPClassifier
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import MultinomialNB,GaussianNB
from sklearn.preprocessing import normalize,StandardScaler,MinMaxScaler
from sklearn.pipeline import Pipeline

def get_MFCC(audio, sr):
    features = mfcc.mfcc(audio, sr, 0.025, 0.01, 13, appendEnergy = True)
    return np.mean(features, axis=0)

# Function which sorts files in a directory
def sorted_alphanumeric(data):
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
    return sorted(data, key=alphanum_key)

# feature extraction for speaker recognition
def feature_extraction_S(dir):
  df=pd.DataFrame()
  Y=[]
  for i in sorted_alphanumeric(os.listdir(dir)):
    for files in os.listdir(dir+i):
      sr, audio = read(dir+i+'/'+files)
      features = get_MFCC(audio, sr)
      row=pd.Series(features)
      df=df.append(row,ignore_index=True)
      Y.append(int(i[3:6]))
  return df,Y

# feature extraction for gender recognition
def gen_features_G(dir):
  df=pd.DataFrame()
  Y=[]
  for i in sorted_alphanumeric(os.listdir(dir)):
    for files in os.listdir(dir+i):
      sr, audio = read(dir+i+'/'+files)
      features = get_MFCC(audio, sr)
      row=pd.Series(features)
      df=df.append(row,ignore_index=True)
      if i[-1]=='F':
        Y.append(0)
      elif i[-1]=='M':
        Y.append(1)
  return df,Y

"""**Speaker Recognition**"""

# Directories of all datasets
dir_train='/content/Speaker_Recognition/Train/'
dir_test='/content/Speaker_Recognition/Test/'
dir_train_G='/content/Gender_Recognition/Train/'
dir_test_G='/content/Gender_Recognition/Test/'

# Feature extraction for training for speaker recognition
train_X_speaker,train_Y_speaker=feature_extraction_S(dir_train)

# Feature extraction for testing for speaker recognition
test_X_speaker,test_Y_speaker=feature_extraction_S(dir_test)

# Feature extraction for training for gender recognition
train_X_gender,train_Y_gender=gen_features_G(dir_train_G)
# Feature extraction for testing for gender recognition
test_X_gender,test_Y_gender=gen_features_G(dir_test_G)

"""**Multi Layer Perceptron for Speaker Recognition**"""

# Creating object for Multi layer Perceptron
mlp=MLPClassifier()

parameters= {'hidden_layer_sizes':[(128,64),(64),(64,32),(32)],
             'activation': ['logistic'],
             'solver':['sgd'],
             'learning_rate_init':[0.4,0.1,0.01],
             'random_state':[1],
             'max_iter':[5000]}

# Performing grid search to train model with best parameters 
# This may take 10-15 mins
gridsearchcv=GridSearchCV(mlp,parameters,n_jobs=-1,scoring='f1_macro')
model=gridsearchcv.fit(train_X_speaker,train_Y_speaker)

# Predicting labels of test files for speaker recognition
pred=model.predict(test_X_speaker)

print('Best Parameters: \n\n',model.best_params_)

print('Best f1_macro Score: ', model.best_score_)

print('Best Estimator: ',model.best_estimator_)

accuracyscore=accuracy_score(test_Y_speaker,pred)
print('Accuracy Score: ',accuracyscore)

report=classification_report(test_Y_speaker,pred)
print('Classification Report: \n\n',report)

cm=confusion_matrix(test_Y_speaker,pred)
print('Confusion Matrix: \n',cm)

"""**Multi Layer Perceptron for Gender Recognition**"""

# Creating object for Multi layer Perceptron
mlp=MLPClassifier()
# Parameters provided on document.
parameters= {'hidden_layer_sizes':[(128,64),(64),(64,32),(32)],
             'activation': ['logistic'],
             'solver':['sgd'],
             'learning_rate_init':[0.4,0.1,0.01],
             'random_state':[1],
             'max_iter':[5000]}

# Performing grid search to train model with best parameters 
# This may take 3-4 mins
gridsearchcv=GridSearchCV(mlp,parameters,n_jobs=-1,scoring='f1_macro')
model=gridsearchcv.fit(train_X_gender,train_Y_gender)

print('Best f1_macro Score: ', model.best_score_)

print('Best Estimator: ',model.best_estimator_)

print('Best Parameters: \n\n',model.best_params_)

# Predicting labels of test files for Gender recognition
pred=model.predict(test_X_gender)
accuracyscore=accuracy_score(test_Y_gender,pred)
print('Accuracy Score: ',accuracyscore)

report=classification_report(test_Y_gender,pred)
print('Classification Report: \n\n',report)

cm=confusion_matrix(test_Y_gender,pred)
print('Confusion Matrix: \n',cm)

"""**Linear Support Vector for Speaker Recognition**"""

# Creating object of Linear Support Vector
clf=LinearSVC(random_state=0,max_iter=10000,dual=False)
# Creating model
model=clf.fit(train_X_speaker,train_Y_speaker)
# Predicting labels of test files
pred=model.predict(test_X_speaker)
# Calculating accuracy
accuracyscore=accuracy_score(test_Y_speaker,pred)
print('Accuracy Score: ',accuracyscore)

report=classification_report(test_Y_speaker,pred)
print('Classification Report: \n\n',report)

cm=confusion_matrix(test_Y_speaker,pred)
print('Confusion Matrix: \n',cm)

"""**Linear Support Vector for Gender Recognition**"""

# Creating object of Linear Support Vector
clf=LinearSVC(random_state=0,max_iter=10000,dual=False)
# Creating model
model=clf.fit(train_X_gender,train_Y_gender)
# Predicting labels for test files
pred=model.predict(test_X_gender)
accuracyscore=accuracy_score(test_Y_gender,pred)
print('Accuracy Score: ',accuracyscore)

report=classification_report(test_Y_gender,pred)
print('Classification Report: \n\n',report)

cm=confusion_matrix(test_Y_gender,pred)
print('Confusion Matrix: \n',cm)

"""**Gaussian Naive Bayes for Speaker Recognition**"""

# Creating object of Gaussian Naive Bayes Classifier
gnb=GaussianNB()
# Using pipeline to scale data
pipe = Pipeline([('scaler', StandardScaler()), ('gnb', gnb)])
# Training model
model=pipe.fit(train_X_speaker,train_Y_speaker)
# Predicting labels for test files
pred=model.predict(test_X_speaker)
# Calculating accuracy score
accuracyscore=accuracy_score(test_Y_speaker,pred)
print('Accuracy Score: ',accuracyscore)

report=classification_report(test_Y_speaker,pred)
print('Classification Report: \n\n',report)

cm=confusion_matrix(test_Y_speaker,pred)
print('Confusion Matrix: \n',cm)

"""**Gaussian Naive Bayes for Gender Recognition**"""

# Creating object of Gaussian Naive Bayes Classifier
gnb=GaussianNB()
# Using pipeline to scale data
pipe = Pipeline([('scaler', StandardScaler()), ('gnb', gnb)])
# Creating model
model=pipe.fit(train_X_gender,train_Y_gender)
# Predicting labels for test files
pred=model.predict(test_X_gender)
accuracyscore=accuracy_score(test_Y_gender,pred)
print('Accuracy Score: ',accuracyscore)

report=classification_report(test_Y_gender,pred)
print('Classification Report: \n\n',report)

cm=confusion_matrix(test_Y_gender,pred)
print('Confusion Matrix: \n',cm)

